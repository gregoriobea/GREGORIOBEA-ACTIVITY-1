#include <WiFi.h>
#include <WebServer.h>

#define NETWORK_SSID "grgrobea"
#define NETWORK_PASS "gregorio1234"

const int lampPins[] = {4, 16, 17, 5, 18};
const int totalLamps = sizeof(lampPins) / sizeof(lampPins[0]);

WebServer server(80);

struct LampState {
  bool toggleMode = false;
  bool modeA = true;
  unsigned long lastToggle = 0;
  const unsigned long toggleInterval = 300;

  bool sequenceActive = false;
  unsigned long lastSequence = 0;
  const unsigned long sequenceInterval = 300;
  int step = 0;
  int direction = 1;
} lampControl;

void setupWiFi() {
  WiFi.begin(NETWORK_SSID, NETWORK_PASS);
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.println("Connected! IP address: " + WiFi.localIP().toString());
}

void setupLamps() {
  for (int pin : lampPins) {
    pinMode(pin, OUTPUT);
    digitalWrite(pin, LOW);
  }
}

void controlLamps(int state) {
  for (int pin : lampPins) {
    digitalWrite(pin, state);
  }
}

void handleRoot() {
  server.send(200, "text/html",
              "<!DOCTYPE html><html><head><title>ESP32 Lamp Control</title></head><body>"
              "<h1>ESP32 Lamp Control</h1>"
              "<button onclick=\"fetch('/on')\">Turn ON</button><br><br>"
              "<button onclick=\"fetch('/off')\">Turn OFF</button><br><br>"
              "<button onclick=\"fetch('/toggle')\">Toggle Mode</button><br><br>"
              "<button onclick=\"fetch('/sequence')\">Sequence Mode</button>"
              "</body></html>");
}

void handleOff() {
  lampControl.toggleMode = false;
  lampControl.sequenceActive = false;
  controlLamps(LOW);
  server.send(200, "text/plain", "Lamps turned OFF");
}

void handleOn() {
  lampControl.toggleMode = false;
  lampControl.sequenceActive = false;
  controlLamps(HIGH);
  server.send(200, "text/plain", "Lamps turned ON");
}

void handleToggle() {
  lampControl.toggleMode = true;
  lampControl.sequenceActive = false;
  lampControl.lastToggle = millis();
  lampControl.modeA = true;
  server.send(200, "text/plain", "Toggle mode activated");
}

void handleSequence() {
  lampControl.sequenceActive = true;
  lampControl.toggleMode = false;
  lampControl.lastSequence = millis();
  lampControl.step = 0;
  lampControl.direction = 1;
  server.send(200, "text/plain", "Sequence mode activated");
}

void setup() {
  Serial.begin(115200);
  setupWiFi();
  setupLamps();

  server.on("/", handleRoot);
  server.on("/off", handleOff);
  server.on("/on", handleOn);
  server.on("/toggle", handleToggle);
  server.on("/sequence", handleSequence);

  server.begin();
  Serial.println("HTTP Server Started");
}

void loop() {
  server.handleClient();
  unsigned long currentTime = millis();

  // Toggle Mode Logic
  if (lampControl.toggleMode && (currentTime - lampControl.lastToggle >= lampControl.toggleInterval)) {
    lampControl.lastToggle = currentTime;
    for (int i = 0; i < totalLamps; i++) {
      bool state = lampControl.modeA ? (i % 2 == 0) : (i % 2 != 0);
      digitalWrite(lampPins[i], state ? HIGH : LOW);
    }
    lampControl.modeA = !lampControl.modeA;
  }

  // Sequence Mode Logic
  if (lampControl.sequenceActive && (currentTime - lampControl.lastSequence >= lampControl.sequenceInterval)) {
    lampControl.lastSequence = currentTime;
    controlLamps(LOW);  // Turn all off
    digitalWrite(lampPins[lampControl.step], HIGH);  // Turn on one

    lampControl.step += lampControl.direction;
    if (lampControl.step >= totalLamps - 1 || lampControl.step <= 0) {
      lampControl.direction *= -1;
    }
  }
}
